import json
import time
import boto3
import datetime

def lambda_handler(event, context):

    parameters = event['parameters']
    run_id = event['parameter']['run_id']

    args = ["spark-submit",
            "--deploy-mode", "cluster",
            "--conf", "spark.driver.cores=1",
            "--conf", "spark.driver.memory=1g",
            "--conf", "spark.executor.cores=1",
            "--conf", "spark.executor.memory=1g",
            "--conf", "spark.executor.instances=1",
            "--conf", "spark.executor.extraJavaOptions=-Dfile.encoding=UTF-8 -Dsun.jnu.encoding=UTF-8",
            "--conf", "spark.driver.extraJavaOptions=-Dfile.encoding=UTF-8 -Dsun.jnu.encoding=UTF-8",
            "--py-files",
            "s3://ph-platform/2020-11-11/jobs/python/phcli/common/phcli-$alfred_phcli_verison-py3.8.egg,s3://ph-platform/2020-11-11/jobs/python/phcli/$alfred_dag_name/$alfred_job_name/phjob.py",
            "s3://ph-platform/2020-11-11/jobs/python/phcli/$alfred_dag_name/$alfred_job_name/phmain.py",
            "--owner", "$alfred_owner"
            "--dag_name", "$alfred_dag_name",
            "--run_id", run_id,
            "--job_full_name", "$alfred_dag_name_$alfred_job_name",
            "--job_id", "$alfred_job_name"
            ]


    s3_client = boto3.client('s3')
    response = s3_client.get_object(
            Bucket="ph-platform",
            Key="2020-11-11/jobs/python/phcli/$alfred_dag_name/$alfred_job_name/args.properties"
        )

    args_str = response["Body"].read().decode()
    args_list = args_str.split("\n")

    # 将list转换成dict
    keys = []
    values = []
    for arg in args_list:
        if args_list.index(arg) % 2 == 0:
            keys.append(arg)
        elif args_list.index(arg) % 2 == 1:
            values.append(arg)
    zip_args = zip(keys, values)
    dict_args = dict(zip_args)

    # 获取生成dict中的参数, 将传进来的dict进行替换
    for key in dict_args.keys():
        if key.lstrip('--') in parameters.keys():
            dict_args[key] = json.dumps(parameters[key.lstrip('--')])

    dict_args.pop("--run_id",None)
    dict_args.pop("--dag_name",None)
    dict_args.pop("--owner",None)
    dict_args.pop("--job_full_name",None)
    dict_args.pop("--job_id",None)



    for key in dict_args.keys():
        args.append(key)
        args.append(dict_args[key])

    return {
        "run_id" : run_id,
        "args": args
    }